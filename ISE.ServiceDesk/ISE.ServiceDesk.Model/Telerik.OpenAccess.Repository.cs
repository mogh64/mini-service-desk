#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ISE.ServiceDesk.Model;
using ISE.ServiceDesk.Common.DTO;


namespace ISE.ServiceDesk.Model	
{
	public partial class SdUserRequestRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdUserRequest, SdUserRequestDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdUserRequestDto FindSingle(Expression<Func<SdUserRequest, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdUserRequest oaObj = this.Context.GetAll<SdUserRequest>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdUserRequestDto> Find(Expression<Func<SdUserRequest, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdUserRequest> oaObjects = this.Context.GetAll<SdUserRequest>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdUserRequest> GetQueryable()
		{    
		    IQueryable<SdUserRequest> oaObjects = this.Context.GetAll<SdUserRequest>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdUserRequest, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdUserRequest>().Count(expression);
		
		    return count;
		}
		
		internal static SdUserRequest CreateInternal(SdUserRequestDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdUserRequest oaObj = new SdUserRequest();
		
			oaObj.SerReqId = dtObj.SerReqId;
			oaObj.Createdate = dtObj.Createdate;
			oaObj.Currentstateid = dtObj.Currentstateid;
			oaObj.Creditdate = dtObj.Creditdate;
			oaObj.Createuserid = dtObj.Createuserid;
			oaObj.Owneruserid = dtObj.Owneruserid;
			oaObj.Servicecategoryjobid = dtObj.Servicecategoryjobid;
			oaObj.Description = dtObj.Description;
			oaObj.Startdate = dtObj.Startdate;
			oaObj.Callnumber = dtObj.Callnumber;
			oaObj.Menuitemid = dtObj.Menuitemid;
			oaObj.Enddate = dtObj.Enddate;
			oaObj.Minestimatetime = dtObj.Minestimatetime;
			oaObj.Maxestimatetime = dtObj.Maxestimatetime;
			oaObj.Transferid = dtObj.Transferid;
			oaObj.Groupingnumber = dtObj.Groupingnumber;
			oaObj.Finalservicecategoryjobid = dtObj.Finalservicecategoryjobid;
			oaObj.Finaldescription = dtObj.Finaldescription;
			oaObj.OwnerChartId = dtObj.OwnerChartId;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.Priority = dtObj.Priority;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdUserRequest Create(SdUserRequestDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdUserRequest UpdateOrCreateInternal(SdUserRequestDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdUserRequest oaObj = (from t in context.GetAll<SdUserRequest>() where
							t.SerReqId == dtObj.SerReqId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Createdate = dtObj.Createdate;
			oaObj.Currentstateid = dtObj.Currentstateid;
			oaObj.Creditdate = dtObj.Creditdate;
			oaObj.Createuserid = dtObj.Createuserid;
			oaObj.Owneruserid = dtObj.Owneruserid;
			oaObj.Servicecategoryjobid = dtObj.Servicecategoryjobid;
			oaObj.Description = dtObj.Description;
			oaObj.Startdate = dtObj.Startdate;
			oaObj.Callnumber = dtObj.Callnumber;
			oaObj.Menuitemid = dtObj.Menuitemid;
			oaObj.Enddate = dtObj.Enddate;
			oaObj.Minestimatetime = dtObj.Minestimatetime;
			oaObj.Maxestimatetime = dtObj.Maxestimatetime;
			oaObj.Transferid = dtObj.Transferid;
			oaObj.Groupingnumber = dtObj.Groupingnumber;
			oaObj.Finalservicecategoryjobid = dtObj.Finalservicecategoryjobid;
			oaObj.Finaldescription = dtObj.Finaldescription;
			oaObj.OwnerChartId = dtObj.OwnerChartId;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.Priority = dtObj.Priority;
			return oaObj;
		}
		
		public SdUserRequest UpdateOrCreate(SdUserRequestDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdUserRequestDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdUserRequest oaObj = (from t in this.Context.GetAll<SdUserRequest>() where
								t.SerReqId == dtObj.SerReqId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdUserRequestDto GetDto(SdUserRequest oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdUserRequestDto dtObj = new SdUserRequestDto();
			dtObj.SerReqId = oaObj.SerReqId;
			dtObj.Createdate = oaObj.Createdate;
			dtObj.Currentstateid = oaObj.Currentstateid;
			dtObj.Creditdate = oaObj.Creditdate;
			dtObj.Createuserid = oaObj.Createuserid;
			dtObj.Owneruserid = oaObj.Owneruserid;
			dtObj.Servicecategoryjobid = oaObj.Servicecategoryjobid;
			dtObj.Description = oaObj.Description;
			dtObj.Startdate = oaObj.Startdate;
			dtObj.Callnumber = oaObj.Callnumber;
			dtObj.Menuitemid = oaObj.Menuitemid;
			dtObj.Enddate = oaObj.Enddate;
			dtObj.Minestimatetime = oaObj.Minestimatetime;
			dtObj.Maxestimatetime = oaObj.Maxestimatetime;
			dtObj.Transferid = oaObj.Transferid;
			dtObj.Groupingnumber = oaObj.Groupingnumber;
			dtObj.Finalservicecategoryjobid = oaObj.Finalservicecategoryjobid;
			dtObj.Finaldescription = oaObj.Finaldescription;
			dtObj.OwnerChartId = oaObj.OwnerChartId;
			dtObj.ExpireDate = oaObj.ExpireDate;
			dtObj.Priority = oaObj.Priority;
			
			return dtObj;
		}
		
		public static IList<SdUserRequestDto> GetDtos(IQueryable<SdUserRequest> oaObjects)
		{
			IList<SdUserRequestDto> dtObjects = new List<SdUserRequestDto>();
			foreach(SdUserRequest oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdServiceJobRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdServiceJob, SdServiceJobDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdServiceJobDto FindSingle(Expression<Func<SdServiceJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdServiceJob oaObj = this.Context.GetAll<SdServiceJob>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdServiceJobDto> Find(Expression<Func<SdServiceJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdServiceJob> oaObjects = this.Context.GetAll<SdServiceJob>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdServiceJob> GetQueryable()
		{    
		    IQueryable<SdServiceJob> oaObjects = this.Context.GetAll<SdServiceJob>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdServiceJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdServiceJob>().Count(expression);
		
		    return count;
		}
		
		internal static SdServiceJob CreateInternal(SdServiceJobDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceJob oaObj = new SdServiceJob();
		
			oaObj.ServiceJobId = dtObj.ServiceJobId;
			oaObj.Title = dtObj.Title;
			oaObj.Description = dtObj.Description;
			oaObj.Enabled = dtObj.Enabled;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdServiceJob Create(SdServiceJobDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdServiceJob UpdateOrCreateInternal(SdServiceJobDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceJob oaObj = (from t in context.GetAll<SdServiceJob>() where
							t.ServiceJobId == dtObj.ServiceJobId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.Description = dtObj.Description;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public SdServiceJob UpdateOrCreate(SdServiceJobDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdServiceJobDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdServiceJob oaObj = (from t in this.Context.GetAll<SdServiceJob>() where
								t.ServiceJobId == dtObj.ServiceJobId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdServiceJobDto GetDto(SdServiceJob oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdServiceJobDto dtObj = new SdServiceJobDto();
			dtObj.ServiceJobId = oaObj.ServiceJobId;
			dtObj.Title = oaObj.Title;
			dtObj.Description = oaObj.Description;
			dtObj.Enabled = oaObj.Enabled;
			
			return dtObj;
		}
		
		public static IList<SdServiceJobDto> GetDtos(IQueryable<SdServiceJob> oaObjects)
		{
			IList<SdServiceJobDto> dtObjects = new List<SdServiceJobDto>();
			foreach(SdServiceJob oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdServiceCategoryJobRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdServiceCategoryJob, SdServiceCategoryJobDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdServiceCategoryJobDto FindSingle(Expression<Func<SdServiceCategoryJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdServiceCategoryJob oaObj = this.Context.GetAll<SdServiceCategoryJob>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdServiceCategoryJobDto> Find(Expression<Func<SdServiceCategoryJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdServiceCategoryJob> oaObjects = this.Context.GetAll<SdServiceCategoryJob>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdServiceCategoryJob> GetQueryable()
		{    
		    IQueryable<SdServiceCategoryJob> oaObjects = this.Context.GetAll<SdServiceCategoryJob>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdServiceCategoryJob, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdServiceCategoryJob>().Count(expression);
		
		    return count;
		}
		
		internal static SdServiceCategoryJob CreateInternal(SdServiceCategoryJobDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceCategoryJob oaObj = new SdServiceCategoryJob();
		
			oaObj.ServiceCatJobId = dtObj.ServiceCatJobId;
			oaObj.Servicecategoryid = dtObj.Servicecategoryid;
			oaObj.Servicejobid = dtObj.Servicejobid;
			oaObj.Actionid = dtObj.Actionid;
			oaObj.Hasattachment = dtObj.Hasattachment;
			oaObj.Hasdescription = dtObj.Hasdescription;
			oaObj.Roleid = dtObj.Roleid;
			oaObj.Hascreditdate = dtObj.Hascreditdate;
			oaObj.Estimatetimecost = dtObj.Estimatetimecost;
			oaObj.Isintree = dtObj.Isintree;
			oaObj.Precedence = dtObj.Precedence;
			oaObj.Multirequest = dtObj.Multirequest;
			oaObj.IsInserter = dtObj.IsInserter;
			oaObj.Enabled = dtObj.Enabled;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdServiceCategoryJob Create(SdServiceCategoryJobDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdServiceCategoryJob UpdateOrCreateInternal(SdServiceCategoryJobDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceCategoryJob oaObj = (from t in context.GetAll<SdServiceCategoryJob>() where
							t.ServiceCatJobId == dtObj.ServiceCatJobId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Servicecategoryid = dtObj.Servicecategoryid;
			oaObj.Servicejobid = dtObj.Servicejobid;
			oaObj.Actionid = dtObj.Actionid;
			oaObj.Hasattachment = dtObj.Hasattachment;
			oaObj.Hasdescription = dtObj.Hasdescription;
			oaObj.Roleid = dtObj.Roleid;
			oaObj.Hascreditdate = dtObj.Hascreditdate;
			oaObj.Estimatetimecost = dtObj.Estimatetimecost;
			oaObj.Isintree = dtObj.Isintree;
			oaObj.Precedence = dtObj.Precedence;
			oaObj.Multirequest = dtObj.Multirequest;
			oaObj.IsInserter = dtObj.IsInserter;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public SdServiceCategoryJob UpdateOrCreate(SdServiceCategoryJobDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdServiceCategoryJobDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdServiceCategoryJob oaObj = (from t in this.Context.GetAll<SdServiceCategoryJob>() where
								t.ServiceCatJobId == dtObj.ServiceCatJobId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdServiceCategoryJobDto GetDto(SdServiceCategoryJob oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdServiceCategoryJobDto dtObj = new SdServiceCategoryJobDto();
			dtObj.ServiceCatJobId = oaObj.ServiceCatJobId;
			dtObj.Servicecategoryid = oaObj.Servicecategoryid;
			dtObj.Servicejobid = oaObj.Servicejobid;
			dtObj.Actionid = oaObj.Actionid;
			dtObj.Hasattachment = oaObj.Hasattachment;
			dtObj.Hasdescription = oaObj.Hasdescription;
			dtObj.Roleid = oaObj.Roleid;
			dtObj.Hascreditdate = oaObj.Hascreditdate;
			dtObj.Estimatetimecost = oaObj.Estimatetimecost;
			dtObj.Isintree = oaObj.Isintree;
			dtObj.Precedence = oaObj.Precedence;
			dtObj.Multirequest = oaObj.Multirequest;
			dtObj.IsInserter = oaObj.IsInserter;
			dtObj.Enabled = oaObj.Enabled;
			
			return dtObj;
		}
		
		public static IList<SdServiceCategoryJobDto> GetDtos(IQueryable<SdServiceCategoryJob> oaObjects)
		{
			IList<SdServiceCategoryJobDto> dtObjects = new List<SdServiceCategoryJobDto>();
			foreach(SdServiceCategoryJob oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdServiceCategoryRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdServiceCategory, SdServiceCategoryDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdServiceCategoryDto FindSingle(Expression<Func<SdServiceCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdServiceCategory oaObj = this.Context.GetAll<SdServiceCategory>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdServiceCategoryDto> Find(Expression<Func<SdServiceCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdServiceCategory> oaObjects = this.Context.GetAll<SdServiceCategory>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdServiceCategory> GetQueryable()
		{    
		    IQueryable<SdServiceCategory> oaObjects = this.Context.GetAll<SdServiceCategory>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdServiceCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdServiceCategory>().Count(expression);
		
		    return count;
		}
		
		internal static SdServiceCategory CreateInternal(SdServiceCategoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceCategory oaObj = new SdServiceCategory();
		
			oaObj.ServiceCatId = dtObj.ServiceCatId;
			oaObj.Title = dtObj.Title;
			oaObj.Description = dtObj.Description;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Parentid = dtObj.Parentid;
			oaObj.Hasjob = dtObj.Hasjob;
			oaObj.Hasfilter = dtObj.Hasfilter;
			oaObj.Hasmenu = dtObj.Hasmenu;
			oaObj.Hasdevice = dtObj.Hasdevice;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdServiceCategory Create(SdServiceCategoryDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdServiceCategory UpdateOrCreateInternal(SdServiceCategoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdServiceCategory oaObj = (from t in context.GetAll<SdServiceCategory>() where
							t.ServiceCatId == dtObj.ServiceCatId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.Description = dtObj.Description;
			oaObj.Enabled = dtObj.Enabled;
			oaObj.Parentid = dtObj.Parentid;
			oaObj.Hasjob = dtObj.Hasjob;
			oaObj.Hasfilter = dtObj.Hasfilter;
			oaObj.Hasmenu = dtObj.Hasmenu;
			oaObj.Hasdevice = dtObj.Hasdevice;
			return oaObj;
		}
		
		public SdServiceCategory UpdateOrCreate(SdServiceCategoryDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdServiceCategoryDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdServiceCategory oaObj = (from t in this.Context.GetAll<SdServiceCategory>() where
								t.ServiceCatId == dtObj.ServiceCatId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdServiceCategoryDto GetDto(SdServiceCategory oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdServiceCategoryDto dtObj = new SdServiceCategoryDto();
			dtObj.ServiceCatId = oaObj.ServiceCatId;
			dtObj.Title = oaObj.Title;
			dtObj.Description = oaObj.Description;
			dtObj.Enabled = oaObj.Enabled;
			dtObj.Parentid = oaObj.Parentid;
			dtObj.Hasjob = oaObj.Hasjob;
			dtObj.Hasfilter = oaObj.Hasfilter;
			dtObj.Hasmenu = oaObj.Hasmenu;
			dtObj.Hasdevice = oaObj.Hasdevice;
			
			return dtObj;
		}
		
		public static IList<SdServiceCategoryDto> GetDtos(IQueryable<SdServiceCategory> oaObjects)
		{
			IList<SdServiceCategoryDto> dtObjects = new List<SdServiceCategoryDto>();
			foreach(SdServiceCategory oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdRequestStateRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdRequestState, SdRequestStateDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdRequestStateDto FindSingle(Expression<Func<SdRequestState, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdRequestState oaObj = this.Context.GetAll<SdRequestState>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdRequestStateDto> Find(Expression<Func<SdRequestState, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdRequestState> oaObjects = this.Context.GetAll<SdRequestState>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdRequestState> GetQueryable()
		{    
		    IQueryable<SdRequestState> oaObjects = this.Context.GetAll<SdRequestState>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdRequestState, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdRequestState>().Count(expression);
		
		    return count;
		}
		
		internal static SdRequestState CreateInternal(SdRequestStateDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestState oaObj = new SdRequestState();
		
			oaObj.SdReqStateId = dtObj.SdReqStateId;
			oaObj.StateTitle = dtObj.StateTitle;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdRequestState Create(SdRequestStateDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdRequestState UpdateOrCreateInternal(SdRequestStateDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestState oaObj = (from t in context.GetAll<SdRequestState>() where
							t.SdReqStateId == dtObj.SdReqStateId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.StateTitle = dtObj.StateTitle;
			return oaObj;
		}
		
		public SdRequestState UpdateOrCreate(SdRequestStateDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdRequestStateDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdRequestState oaObj = (from t in this.Context.GetAll<SdRequestState>() where
								t.SdReqStateId == dtObj.SdReqStateId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdRequestStateDto GetDto(SdRequestState oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdRequestStateDto dtObj = new SdRequestStateDto();
			dtObj.SdReqStateId = oaObj.SdReqStateId;
			dtObj.StateTitle = oaObj.StateTitle;
			
			return dtObj;
		}
		
		public static IList<SdRequestStateDto> GetDtos(IQueryable<SdRequestState> oaObjects)
		{
			IList<SdRequestStateDto> dtObjects = new List<SdRequestStateDto>();
			foreach(SdRequestState oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdRequestProcessRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdRequestProcess, SdRequestProcessDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdRequestProcessDto FindSingle(Expression<Func<SdRequestProcess, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdRequestProcess oaObj = this.Context.GetAll<SdRequestProcess>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdRequestProcessDto> Find(Expression<Func<SdRequestProcess, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdRequestProcess> oaObjects = this.Context.GetAll<SdRequestProcess>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdRequestProcess> GetQueryable()
		{    
		    IQueryable<SdRequestProcess> oaObjects = this.Context.GetAll<SdRequestProcess>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdRequestProcess, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdRequestProcess>().Count(expression);
		
		    return count;
		}
		
		internal static SdRequestProcess CreateInternal(SdRequestProcessDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestProcess oaObj = new SdRequestProcess();
		
			oaObj.ReqProcessId = dtObj.ReqProcessId;
			oaObj.Servicecategoryjobid = dtObj.Servicecategoryjobid;
			oaObj.Description = dtObj.Description;
			oaObj.Processdate = dtObj.Processdate;
			oaObj.Itexpertid = dtObj.Itexpertid;
			oaObj.Timecost = dtObj.Timecost;
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Financialcost = dtObj.Financialcost;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdRequestProcess Create(SdRequestProcessDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdRequestProcess UpdateOrCreateInternal(SdRequestProcessDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestProcess oaObj = (from t in context.GetAll<SdRequestProcess>() where
							t.ReqProcessId == dtObj.ReqProcessId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Servicecategoryjobid = dtObj.Servicecategoryjobid;
			oaObj.Description = dtObj.Description;
			oaObj.Processdate = dtObj.Processdate;
			oaObj.Itexpertid = dtObj.Itexpertid;
			oaObj.Timecost = dtObj.Timecost;
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Financialcost = dtObj.Financialcost;
			return oaObj;
		}
		
		public SdRequestProcess UpdateOrCreate(SdRequestProcessDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdRequestProcessDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdRequestProcess oaObj = (from t in this.Context.GetAll<SdRequestProcess>() where
								t.ReqProcessId == dtObj.ReqProcessId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdRequestProcessDto GetDto(SdRequestProcess oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdRequestProcessDto dtObj = new SdRequestProcessDto();
			dtObj.ReqProcessId = oaObj.ReqProcessId;
			dtObj.Servicecategoryjobid = oaObj.Servicecategoryjobid;
			dtObj.Description = oaObj.Description;
			dtObj.Processdate = oaObj.Processdate;
			dtObj.Itexpertid = oaObj.Itexpertid;
			dtObj.Timecost = oaObj.Timecost;
			dtObj.Requestid = oaObj.Requestid;
			dtObj.Financialcost = oaObj.Financialcost;
			
			return dtObj;
		}
		
		public static IList<SdRequestProcessDto> GetDtos(IQueryable<SdRequestProcess> oaObjects)
		{
			IList<SdRequestProcessDto> dtObjects = new List<SdRequestProcessDto>();
			foreach(SdRequestProcess oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdRequestAttachmentRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdRequestAttachment, SdRequestAttachmentDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdRequestAttachmentDto FindSingle(Expression<Func<SdRequestAttachment, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdRequestAttachment oaObj = this.Context.GetAll<SdRequestAttachment>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdRequestAttachmentDto> Find(Expression<Func<SdRequestAttachment, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdRequestAttachment> oaObjects = this.Context.GetAll<SdRequestAttachment>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdRequestAttachment> GetQueryable()
		{    
		    IQueryable<SdRequestAttachment> oaObjects = this.Context.GetAll<SdRequestAttachment>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdRequestAttachment, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdRequestAttachment>().Count(expression);
		
		    return count;
		}
		
		internal static SdRequestAttachment CreateInternal(SdRequestAttachmentDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestAttachment oaObj = new SdRequestAttachment();
		
			oaObj.ReuestAttachId = dtObj.ReuestAttachId;
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Filetype = dtObj.Filetype;
			oaObj.Filename = dtObj.Filename;
			oaObj.Description = dtObj.Description;
			oaObj.Content = dtObj.Content;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdRequestAttachment Create(SdRequestAttachmentDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdRequestAttachment UpdateOrCreateInternal(SdRequestAttachmentDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestAttachment oaObj = (from t in context.GetAll<SdRequestAttachment>() where
							t.ReuestAttachId == dtObj.ReuestAttachId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Filetype = dtObj.Filetype;
			oaObj.Filename = dtObj.Filename;
			oaObj.Description = dtObj.Description;
			oaObj.Content = dtObj.Content;
			return oaObj;
		}
		
		public SdRequestAttachment UpdateOrCreate(SdRequestAttachmentDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdRequestAttachmentDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdRequestAttachment oaObj = (from t in this.Context.GetAll<SdRequestAttachment>() where
								t.ReuestAttachId == dtObj.ReuestAttachId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdRequestAttachmentDto GetDto(SdRequestAttachment oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdRequestAttachmentDto dtObj = new SdRequestAttachmentDto();
			dtObj.ReuestAttachId = oaObj.ReuestAttachId;
			dtObj.Requestid = oaObj.Requestid;
			dtObj.Filetype = oaObj.Filetype;
			dtObj.Filename = oaObj.Filename;
			dtObj.Description = oaObj.Description;
			dtObj.Content = oaObj.Content;
			
			return dtObj;
		}
		
		public static IList<SdRequestAttachmentDto> GetDtos(IQueryable<SdRequestAttachment> oaObjects)
		{
			IList<SdRequestAttachmentDto> dtObjects = new List<SdRequestAttachmentDto>();
			foreach(SdRequestAttachment oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdRequestAssignedExpertRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdRequestAssignedExpert, SdRequestAssignedExpertDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdRequestAssignedExpertDto FindSingle(Expression<Func<SdRequestAssignedExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdRequestAssignedExpert oaObj = this.Context.GetAll<SdRequestAssignedExpert>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdRequestAssignedExpertDto> Find(Expression<Func<SdRequestAssignedExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdRequestAssignedExpert> oaObjects = this.Context.GetAll<SdRequestAssignedExpert>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdRequestAssignedExpert> GetQueryable()
		{    
		    IQueryable<SdRequestAssignedExpert> oaObjects = this.Context.GetAll<SdRequestAssignedExpert>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdRequestAssignedExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdRequestAssignedExpert>().Count(expression);
		
		    return count;
		}
		
		internal static SdRequestAssignedExpert CreateInternal(SdRequestAssignedExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestAssignedExpert oaObj = new SdRequestAssignedExpert();
		
			oaObj.ReqiestExpertId = dtObj.ReqiestExpertId;
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Assigndate = dtObj.Assigndate;
			oaObj.Assigntype = dtObj.Assigntype;
			oaObj.Ishead = dtObj.Ishead;
			oaObj.ExpertPerId = dtObj.ExpertPerId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdRequestAssignedExpert Create(SdRequestAssignedExpertDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdRequestAssignedExpert UpdateOrCreateInternal(SdRequestAssignedExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestAssignedExpert oaObj = (from t in context.GetAll<SdRequestAssignedExpert>() where
							t.ReqiestExpertId == dtObj.ReqiestExpertId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Requestid = dtObj.Requestid;
			oaObj.Assigndate = dtObj.Assigndate;
			oaObj.Assigntype = dtObj.Assigntype;
			oaObj.Ishead = dtObj.Ishead;
			oaObj.ExpertPerId = dtObj.ExpertPerId;
			return oaObj;
		}
		
		public SdRequestAssignedExpert UpdateOrCreate(SdRequestAssignedExpertDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdRequestAssignedExpertDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdRequestAssignedExpert oaObj = (from t in this.Context.GetAll<SdRequestAssignedExpert>() where
								t.ReqiestExpertId == dtObj.ReqiestExpertId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdRequestAssignedExpertDto GetDto(SdRequestAssignedExpert oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdRequestAssignedExpertDto dtObj = new SdRequestAssignedExpertDto();
			dtObj.ReqiestExpertId = oaObj.ReqiestExpertId;
			dtObj.Requestid = oaObj.Requestid;
			dtObj.Assigndate = oaObj.Assigndate;
			dtObj.Assigntype = oaObj.Assigntype;
			dtObj.Ishead = oaObj.Ishead;
			dtObj.ExpertPerId = oaObj.ExpertPerId;
			
			return dtObj;
		}
		
		public static IList<SdRequestAssignedExpertDto> GetDtos(IQueryable<SdRequestAssignedExpert> oaObjects)
		{
			IList<SdRequestAssignedExpertDto> dtObjects = new List<SdRequestAssignedExpertDto>();
			foreach(SdRequestAssignedExpert oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdOfficeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdOffice, SdOfficeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdOfficeDto FindSingle(Expression<Func<SdOffice, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdOffice oaObj = this.Context.GetAll<SdOffice>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdOfficeDto> Find(Expression<Func<SdOffice, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdOffice> oaObjects = this.Context.GetAll<SdOffice>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdOffice> GetQueryable()
		{    
		    IQueryable<SdOffice> oaObjects = this.Context.GetAll<SdOffice>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdOffice, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdOffice>().Count(expression);
		
		    return count;
		}
		
		internal static SdOffice CreateInternal(SdOfficeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdOffice oaObj = new SdOffice();
		
			oaObj.OfficeId = dtObj.OfficeId;
			oaObj.Title = dtObj.Title;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdOffice Create(SdOfficeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdOffice UpdateOrCreateInternal(SdOfficeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdOffice oaObj = (from t in context.GetAll<SdOffice>() where
							t.OfficeId == dtObj.OfficeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			return oaObj;
		}
		
		public SdOffice UpdateOrCreate(SdOfficeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdOfficeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdOffice oaObj = (from t in this.Context.GetAll<SdOffice>() where
								t.OfficeId == dtObj.OfficeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdOfficeDto GetDto(SdOffice oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdOfficeDto dtObj = new SdOfficeDto();
			dtObj.OfficeId = oaObj.OfficeId;
			dtObj.Title = oaObj.Title;
			
			return dtObj;
		}
		
		public static IList<SdOfficeDto> GetDtos(IQueryable<SdOffice> oaObjects)
		{
			IList<SdOfficeDto> dtObjects = new List<SdOfficeDto>();
			foreach(SdOffice oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdItRoleExpertRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdItRoleExpert, SdItRoleExpertDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdItRoleExpertDto FindSingle(Expression<Func<SdItRoleExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdItRoleExpert oaObj = this.Context.GetAll<SdItRoleExpert>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdItRoleExpertDto> Find(Expression<Func<SdItRoleExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdItRoleExpert> oaObjects = this.Context.GetAll<SdItRoleExpert>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdItRoleExpert> GetQueryable()
		{    
		    IQueryable<SdItRoleExpert> oaObjects = this.Context.GetAll<SdItRoleExpert>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdItRoleExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdItRoleExpert>().Count(expression);
		
		    return count;
		}
		
		internal static SdItRoleExpert CreateInternal(SdItRoleExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItRoleExpert oaObj = new SdItRoleExpert();
		
			oaObj.RoleExpertId = dtObj.RoleExpertId;
			oaObj.Expertid = dtObj.Expertid;
			oaObj.Itroleid = dtObj.Itroleid;
			oaObj.Weight = dtObj.Weight;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdItRoleExpert Create(SdItRoleExpertDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdItRoleExpert UpdateOrCreateInternal(SdItRoleExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItRoleExpert oaObj = (from t in context.GetAll<SdItRoleExpert>() where
							t.RoleExpertId == dtObj.RoleExpertId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Expertid = dtObj.Expertid;
			oaObj.Itroleid = dtObj.Itroleid;
			oaObj.Weight = dtObj.Weight;
			return oaObj;
		}
		
		public SdItRoleExpert UpdateOrCreate(SdItRoleExpertDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdItRoleExpertDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdItRoleExpert oaObj = (from t in this.Context.GetAll<SdItRoleExpert>() where
								t.RoleExpertId == dtObj.RoleExpertId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdItRoleExpertDto GetDto(SdItRoleExpert oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdItRoleExpertDto dtObj = new SdItRoleExpertDto();
			dtObj.RoleExpertId = oaObj.RoleExpertId;
			dtObj.Expertid = oaObj.Expertid;
			dtObj.Itroleid = oaObj.Itroleid;
			dtObj.Weight = oaObj.Weight;
			
			return dtObj;
		}
		
		public static IList<SdItRoleExpertDto> GetDtos(IQueryable<SdItRoleExpert> oaObjects)
		{
			IList<SdItRoleExpertDto> dtObjects = new List<SdItRoleExpertDto>();
			foreach(SdItRoleExpert oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdItRoleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdItRole, SdItRoleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdItRoleDto FindSingle(Expression<Func<SdItRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdItRole oaObj = this.Context.GetAll<SdItRole>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdItRoleDto> Find(Expression<Func<SdItRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdItRole> oaObjects = this.Context.GetAll<SdItRole>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdItRole> GetQueryable()
		{    
		    IQueryable<SdItRole> oaObjects = this.Context.GetAll<SdItRole>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdItRole, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdItRole>().Count(expression);
		
		    return count;
		}
		
		internal static SdItRole CreateInternal(SdItRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItRole oaObj = new SdItRole();
		
			oaObj.RoleId = dtObj.RoleId;
			oaObj.Title = dtObj.Title;
			oaObj.Officeid = dtObj.Officeid;
			oaObj.Description = dtObj.Description;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdItRole Create(SdItRoleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdItRole UpdateOrCreateInternal(SdItRoleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItRole oaObj = (from t in context.GetAll<SdItRole>() where
							t.RoleId == dtObj.RoleId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.Officeid = dtObj.Officeid;
			oaObj.Description = dtObj.Description;
			return oaObj;
		}
		
		public SdItRole UpdateOrCreate(SdItRoleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdItRoleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdItRole oaObj = (from t in this.Context.GetAll<SdItRole>() where
								t.RoleId == dtObj.RoleId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdItRoleDto GetDto(SdItRole oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdItRoleDto dtObj = new SdItRoleDto();
			dtObj.RoleId = oaObj.RoleId;
			dtObj.Title = oaObj.Title;
			dtObj.Officeid = oaObj.Officeid;
			dtObj.Description = oaObj.Description;
			
			return dtObj;
		}
		
		public static IList<SdItRoleDto> GetDtos(IQueryable<SdItRole> oaObjects)
		{
			IList<SdItRoleDto> dtObjects = new List<SdItRoleDto>();
			foreach(SdItRole oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdItExpertRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdItExpert, SdItExpertDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdItExpertDto FindSingle(Expression<Func<SdItExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdItExpert oaObj = this.Context.GetAll<SdItExpert>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdItExpertDto> Find(Expression<Func<SdItExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdItExpert> oaObjects = this.Context.GetAll<SdItExpert>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdItExpert> GetQueryable()
		{    
		    IQueryable<SdItExpert> oaObjects = this.Context.GetAll<SdItExpert>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdItExpert, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdItExpert>().Count(expression);
		
		    return count;
		}
		
		internal static SdItExpert CreateInternal(SdItExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItExpert oaObj = new SdItExpert();
		
			oaObj.ItExpertId = dtObj.ItExpertId;
			oaObj.Userid = dtObj.Userid;
			oaObj.Officeid = dtObj.Officeid;
			oaObj.Enabled = dtObj.Enabled;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdItExpert Create(SdItExpertDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdItExpert UpdateOrCreateInternal(SdItExpertDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdItExpert oaObj = (from t in context.GetAll<SdItExpert>() where
							t.ItExpertId == dtObj.ItExpertId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Userid = dtObj.Userid;
			oaObj.Officeid = dtObj.Officeid;
			oaObj.Enabled = dtObj.Enabled;
			return oaObj;
		}
		
		public SdItExpert UpdateOrCreate(SdItExpertDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdItExpertDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdItExpert oaObj = (from t in this.Context.GetAll<SdItExpert>() where
								t.ItExpertId == dtObj.ItExpertId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdItExpertDto GetDto(SdItExpert oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdItExpertDto dtObj = new SdItExpertDto();
			dtObj.ItExpertId = oaObj.ItExpertId;
			dtObj.Userid = oaObj.Userid;
			dtObj.Officeid = oaObj.Officeid;
			dtObj.Enabled = oaObj.Enabled;
			
			return dtObj;
		}
		
		public static IList<SdItExpertDto> GetDtos(IQueryable<SdItExpert> oaObjects)
		{
			IList<SdItExpertDto> dtObjects = new List<SdItExpertDto>();
			foreach(SdItExpert oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdFilterCategoryRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdFilterCategory, SdFilterCategoryDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdFilterCategoryDto FindSingle(Expression<Func<SdFilterCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdFilterCategory oaObj = this.Context.GetAll<SdFilterCategory>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdFilterCategoryDto> Find(Expression<Func<SdFilterCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdFilterCategory> oaObjects = this.Context.GetAll<SdFilterCategory>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdFilterCategory> GetQueryable()
		{    
		    IQueryable<SdFilterCategory> oaObjects = this.Context.GetAll<SdFilterCategory>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdFilterCategory, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdFilterCategory>().Count(expression);
		
		    return count;
		}
		
		internal static SdFilterCategory CreateInternal(SdFilterCategoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdFilterCategory oaObj = new SdFilterCategory();
		
			oaObj.FilterId = dtObj.FilterId;
			oaObj.Servicecaegoryid = dtObj.Servicecaegoryid;
			oaObj.Menuparentid = dtObj.Menuparentid;
			oaObj.Objecttypeid = dtObj.Objecttypeid;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdFilterCategory Create(SdFilterCategoryDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdFilterCategory UpdateOrCreateInternal(SdFilterCategoryDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdFilterCategory oaObj = (from t in context.GetAll<SdFilterCategory>() where
							t.FilterId == dtObj.FilterId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Servicecaegoryid = dtObj.Servicecaegoryid;
			oaObj.Menuparentid = dtObj.Menuparentid;
			oaObj.Objecttypeid = dtObj.Objecttypeid;
			return oaObj;
		}
		
		public SdFilterCategory UpdateOrCreate(SdFilterCategoryDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdFilterCategoryDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdFilterCategory oaObj = (from t in this.Context.GetAll<SdFilterCategory>() where
								t.FilterId == dtObj.FilterId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdFilterCategoryDto GetDto(SdFilterCategory oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdFilterCategoryDto dtObj = new SdFilterCategoryDto();
			dtObj.FilterId = oaObj.FilterId;
			dtObj.Servicecaegoryid = oaObj.Servicecaegoryid;
			dtObj.Menuparentid = oaObj.Menuparentid;
			dtObj.Objecttypeid = oaObj.Objecttypeid;
			
			return dtObj;
		}
		
		public static IList<SdFilterCategoryDto> GetDtos(IQueryable<SdFilterCategory> oaObjects)
		{
			IList<SdFilterCategoryDto> dtObjects = new List<SdFilterCategoryDto>();
			foreach(SdFilterCategory oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class VwPersonelRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<VwPersonel, VwPersonelDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public VwPersonelDto FindSingle(Expression<Func<VwPersonel, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    VwPersonel oaObj = this.Context.GetAll<VwPersonel>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<VwPersonelDto> Find(Expression<Func<VwPersonel, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<VwPersonel> oaObjects = this.Context.GetAll<VwPersonel>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<VwPersonel> GetQueryable()
		{    
		    IQueryable<VwPersonel> oaObjects = this.Context.GetAll<VwPersonel>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<VwPersonel, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<VwPersonel>().Count(expression);
		
		    return count;
		}
		
		internal static VwPersonel CreateInternal(VwPersonelDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			VwPersonel oaObj = new VwPersonel();
		
			oaObj.PositionId = dtObj.PositionId;
			oaObj.PositionDesc = dtObj.PositionDesc;
			oaObj.PerType = dtObj.PerType;
			oaObj.PerNo = dtObj.PerNo;
			oaObj.PerLname = dtObj.PerLname;
			oaObj.PerId = dtObj.PerId;
			oaObj.PerFname = dtObj.PerFname;
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.Name = dtObj.Name;
			oaObj.Isactivate = dtObj.Isactivate;
			oaObj.IndependentId = dtObj.IndependentId;
			oaObj.FullName = dtObj.FullName;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.EndDate = dtObj.EndDate;
			oaObj.ChartId = dtObj.ChartId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public VwPersonel Create(VwPersonelDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static VwPersonel UpdateOrCreateInternal(VwPersonelDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			VwPersonel oaObj = (from t in context.GetAll<VwPersonel>() where
							t.PerId == dtObj.PerId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.PositionId = dtObj.PositionId;
			oaObj.PositionDesc = dtObj.PositionDesc;
			oaObj.PerType = dtObj.PerType;
			oaObj.PerNo = dtObj.PerNo;
			oaObj.PerLname = dtObj.PerLname;
			oaObj.PerFname = dtObj.PerFname;
			oaObj.NationalNo = dtObj.NationalNo;
			oaObj.Name = dtObj.Name;
			oaObj.Isactivate = dtObj.Isactivate;
			oaObj.IndependentId = dtObj.IndependentId;
			oaObj.FullName = dtObj.FullName;
			oaObj.ExpireDate = dtObj.ExpireDate;
			oaObj.EndDate = dtObj.EndDate;
			oaObj.ChartId = dtObj.ChartId;
			return oaObj;
		}
		
		public VwPersonel UpdateOrCreate(VwPersonelDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(VwPersonelDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			VwPersonel oaObj = (from t in this.Context.GetAll<VwPersonel>() where
								t.PerId == dtObj.PerId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static VwPersonelDto GetDto(VwPersonel oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			VwPersonelDto dtObj = new VwPersonelDto();
			dtObj.PositionId = oaObj.PositionId;
			dtObj.PositionDesc = oaObj.PositionDesc;
			dtObj.PerType = oaObj.PerType;
			dtObj.PerNo = oaObj.PerNo;
			dtObj.PerLname = oaObj.PerLname;
			dtObj.PerId = oaObj.PerId;
			dtObj.PerFname = oaObj.PerFname;
			dtObj.NationalNo = oaObj.NationalNo;
			dtObj.Name = oaObj.Name;
			dtObj.Isactivate = oaObj.Isactivate;
			dtObj.IndependentId = oaObj.IndependentId;
			dtObj.FullName = oaObj.FullName;
			dtObj.ExpireDate = oaObj.ExpireDate;
			dtObj.EndDate = oaObj.EndDate;
			dtObj.ChartId = oaObj.ChartId;
			
			return dtObj;
		}
		
		public static IList<VwPersonelDto> GetDtos(IQueryable<VwPersonel> oaObjects)
		{
			IList<VwPersonelDto> dtObjects = new List<VwPersonelDto>();
			foreach(VwPersonel oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class ObjecttypeRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Objecttype, ObjecttypeDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public ObjecttypeDto FindSingle(Expression<Func<Objecttype, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Objecttype oaObj = this.Context.GetAll<Objecttype>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<ObjecttypeDto> Find(Expression<Func<Objecttype, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Objecttype> oaObjects = this.Context.GetAll<Objecttype>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Objecttype> GetQueryable()
		{    
		    IQueryable<Objecttype> oaObjects = this.Context.GetAll<Objecttype>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Objecttype, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Objecttype>().Count(expression);
		
		    return count;
		}
		
		internal static Objecttype CreateInternal(ObjecttypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Objecttype oaObj = new Objecttype();
		
			oaObj.ObjecttypeId = dtObj.ObjecttypeId;
			oaObj.ObjecttypeDesc = dtObj.ObjecttypeDesc;
			oaObj.Deliverable = dtObj.Deliverable;
			oaObj.Sizeable = dtObj.Sizeable;
			oaObj.Sizeabledesc = dtObj.Sizeabledesc;
			oaObj.Denumerable = dtObj.Denumerable;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Objecttype Create(ObjecttypeDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Objecttype UpdateOrCreateInternal(ObjecttypeDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Objecttype oaObj = (from t in context.GetAll<Objecttype>() where
							t.ObjecttypeId == dtObj.ObjecttypeId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.ObjecttypeDesc = dtObj.ObjecttypeDesc;
			oaObj.Deliverable = dtObj.Deliverable;
			oaObj.Sizeable = dtObj.Sizeable;
			oaObj.Sizeabledesc = dtObj.Sizeabledesc;
			oaObj.Denumerable = dtObj.Denumerable;
			return oaObj;
		}
		
		public Objecttype UpdateOrCreate(ObjecttypeDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(ObjecttypeDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Objecttype oaObj = (from t in this.Context.GetAll<Objecttype>() where
								t.ObjecttypeId == dtObj.ObjecttypeId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static ObjecttypeDto GetDto(Objecttype oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			ObjecttypeDto dtObj = new ObjecttypeDto();
			dtObj.ObjecttypeId = oaObj.ObjecttypeId;
			dtObj.ObjecttypeDesc = oaObj.ObjecttypeDesc;
			dtObj.Deliverable = oaObj.Deliverable;
			dtObj.Sizeable = oaObj.Sizeable;
			dtObj.Sizeabledesc = oaObj.Sizeabledesc;
			dtObj.Denumerable = oaObj.Denumerable;
			
			return dtObj;
		}
		
		public static IList<ObjecttypeDto> GetDtos(IQueryable<Objecttype> oaObjects)
		{
			IList<ObjecttypeDto> dtObjects = new List<ObjecttypeDto>();
			foreach(Objecttype oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdRequestWorkRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdRequestWork, SdRequestWorkDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdRequestWorkDto FindSingle(Expression<Func<SdRequestWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdRequestWork oaObj = this.Context.GetAll<SdRequestWork>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdRequestWorkDto> Find(Expression<Func<SdRequestWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdRequestWork> oaObjects = this.Context.GetAll<SdRequestWork>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdRequestWork> GetQueryable()
		{    
		    IQueryable<SdRequestWork> oaObjects = this.Context.GetAll<SdRequestWork>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdRequestWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdRequestWork>().Count(expression);
		
		    return count;
		}
		
		internal static SdRequestWork CreateInternal(SdRequestWorkDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestWork oaObj = new SdRequestWork();
		
			oaObj.RequestId = dtObj.RequestId;
			oaObj.Description = dtObj.Description;
			oaObj.UserId = dtObj.UserId;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.RequestWorkId = dtObj.RequestWorkId;
			oaObj.SdWorkId = dtObj.SdWorkId;
			oaObj.WorkTime = dtObj.WorkTime;
			oaObj.WorkCost = dtObj.WorkCost;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdRequestWork Create(SdRequestWorkDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdRequestWork UpdateOrCreateInternal(SdRequestWorkDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdRequestWork oaObj = (from t in context.GetAll<SdRequestWork>() where
							t.RequestWorkId == dtObj.RequestWorkId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.RequestId = dtObj.RequestId;
			oaObj.Description = dtObj.Description;
			oaObj.UserId = dtObj.UserId;
			oaObj.CreateDate = dtObj.CreateDate;
			oaObj.SdWorkId = dtObj.SdWorkId;
			oaObj.WorkTime = dtObj.WorkTime;
			oaObj.WorkCost = dtObj.WorkCost;
			return oaObj;
		}
		
		public SdRequestWork UpdateOrCreate(SdRequestWorkDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdRequestWorkDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdRequestWork oaObj = (from t in this.Context.GetAll<SdRequestWork>() where
								t.RequestWorkId == dtObj.RequestWorkId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdRequestWorkDto GetDto(SdRequestWork oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdRequestWorkDto dtObj = new SdRequestWorkDto();
			dtObj.RequestId = oaObj.RequestId;
			dtObj.Description = oaObj.Description;
			dtObj.UserId = oaObj.UserId;
			dtObj.CreateDate = oaObj.CreateDate;
			dtObj.RequestWorkId = oaObj.RequestWorkId;
			dtObj.SdWorkId = oaObj.SdWorkId;
			dtObj.WorkTime = oaObj.WorkTime;
			dtObj.WorkCost = oaObj.WorkCost;
			
			return dtObj;
		}
		
		public static IList<SdRequestWorkDto> GetDtos(IQueryable<SdRequestWork> oaObjects)
		{
			IList<SdRequestWorkDto> dtObjects = new List<SdRequestWorkDto>();
			foreach(SdRequestWork oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class SdWorkRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<SdWork, SdWorkDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public SdWorkDto FindSingle(Expression<Func<SdWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    SdWork oaObj = this.Context.GetAll<SdWork>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<SdWorkDto> Find(Expression<Func<SdWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<SdWork> oaObjects = this.Context.GetAll<SdWork>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<SdWork> GetQueryable()
		{    
		    IQueryable<SdWork> oaObjects = this.Context.GetAll<SdWork>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<SdWork, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<SdWork>().Count(expression);
		
		    return count;
		}
		
		internal static SdWork CreateInternal(SdWorkDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdWork oaObj = new SdWork();
		
			oaObj.WorkId = dtObj.WorkId;
			oaObj.Title = dtObj.Title;
			oaObj.EstimateTime = dtObj.EstimateTime;
			oaObj.EstimateCost = dtObj.EstimateCost;
			oaObj.SdServiceCatId = dtObj.SdServiceCatId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public SdWork Create(SdWorkDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static SdWork UpdateOrCreateInternal(SdWorkDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			SdWork oaObj = (from t in context.GetAll<SdWork>() where
							t.WorkId == dtObj.WorkId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Title = dtObj.Title;
			oaObj.EstimateTime = dtObj.EstimateTime;
			oaObj.EstimateCost = dtObj.EstimateCost;
			oaObj.SdServiceCatId = dtObj.SdServiceCatId;
			return oaObj;
		}
		
		public SdWork UpdateOrCreate(SdWorkDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(SdWorkDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			SdWork oaObj = (from t in this.Context.GetAll<SdWork>() where
								t.WorkId == dtObj.WorkId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static SdWorkDto GetDto(SdWork oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			SdWorkDto dtObj = new SdWorkDto();
			dtObj.WorkId = oaObj.WorkId;
			dtObj.Title = oaObj.Title;
			dtObj.EstimateTime = oaObj.EstimateTime;
			dtObj.EstimateCost = oaObj.EstimateCost;
			dtObj.SdServiceCatId = oaObj.SdServiceCatId;
			
			return dtObj;
		}
		
		public static IList<SdWorkDto> GetDtos(IQueryable<SdWork> oaObjects)
		{
			IList<SdWorkDto> dtObjects = new List<SdWorkDto>();
			foreach(SdWork oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class RequestcartablecycleRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<Requestcartablecycle, RequestcartablecycleDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public RequestcartablecycleDto FindSingle(Expression<Func<Requestcartablecycle, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    Requestcartablecycle oaObj = this.Context.GetAll<Requestcartablecycle>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<RequestcartablecycleDto> Find(Expression<Func<Requestcartablecycle, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<Requestcartablecycle> oaObjects = this.Context.GetAll<Requestcartablecycle>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<Requestcartablecycle> GetQueryable()
		{    
		    IQueryable<Requestcartablecycle> oaObjects = this.Context.GetAll<Requestcartablecycle>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<Requestcartablecycle, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<Requestcartablecycle>().Count(expression);
		
		    return count;
		}
		
		internal static Requestcartablecycle CreateInternal(RequestcartablecycleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Requestcartablecycle oaObj = new Requestcartablecycle();
		
			oaObj.Servicejob = dtObj.Servicejob;
			oaObj.Servicecategory = dtObj.Servicecategory;
			oaObj.SerReqId = dtObj.SerReqId;
			oaObj.Sendtime = dtObj.Sendtime;
			oaObj.SenderPerId = dtObj.SenderPerId;
			oaObj.SenderNameFamily = dtObj.SenderNameFamily;
			oaObj.SendDate = dtObj.SendDate;
			oaObj.ReceiverPerId = dtObj.ReceiverPerId;
			oaObj.ReceiverNameFamily = dtObj.ReceiverNameFamily;
			oaObj.PositionTypeId = dtObj.PositionTypeId;
			oaObj.Personelname = dtObj.Personelname;
			oaObj.Ownername = dtObj.Ownername;
			oaObj.OwnerChartName = dtObj.OwnerChartName;
			oaObj.NoArchiveDate = dtObj.NoArchiveDate;
			oaObj.IntialingComment = dtObj.IntialingComment;
			oaObj.CyclestatusChangeDate = dtObj.CyclestatusChangeDate;
			oaObj.CycleStatusId = dtObj.CycleStatusId;
			oaObj.CycleStatusDesc = dtObj.CycleStatusDesc;
			oaObj.CycleRow = dtObj.CycleRow;
			oaObj.CycleId = dtObj.CycleId;
			oaObj.Createdate = dtObj.Createdate;
			oaObj.BeTerminated = dtObj.BeTerminated;
			oaObj.ArchiveDate = dtObj.ArchiveDate;
			oaObj.ArchiveCode = dtObj.ArchiveCode;
			oaObj.ActionParentId = dtObj.ActionParentId;
			oaObj.ActionName = dtObj.ActionName;
			oaObj.ActionId = dtObj.ActionId;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public Requestcartablecycle Create(RequestcartablecycleDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static Requestcartablecycle UpdateOrCreateInternal(RequestcartablecycleDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			Requestcartablecycle oaObj = (from t in context.GetAll<Requestcartablecycle>() where
							t.CycleId == dtObj.CycleId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.Servicejob = dtObj.Servicejob;
			oaObj.Servicecategory = dtObj.Servicecategory;
			oaObj.SerReqId = dtObj.SerReqId;
			oaObj.Sendtime = dtObj.Sendtime;
			oaObj.SenderPerId = dtObj.SenderPerId;
			oaObj.SenderNameFamily = dtObj.SenderNameFamily;
			oaObj.SendDate = dtObj.SendDate;
			oaObj.ReceiverPerId = dtObj.ReceiverPerId;
			oaObj.ReceiverNameFamily = dtObj.ReceiverNameFamily;
			oaObj.PositionTypeId = dtObj.PositionTypeId;
			oaObj.Personelname = dtObj.Personelname;
			oaObj.Ownername = dtObj.Ownername;
			oaObj.OwnerChartName = dtObj.OwnerChartName;
			oaObj.NoArchiveDate = dtObj.NoArchiveDate;
			oaObj.IntialingComment = dtObj.IntialingComment;
			oaObj.CyclestatusChangeDate = dtObj.CyclestatusChangeDate;
			oaObj.CycleStatusId = dtObj.CycleStatusId;
			oaObj.CycleStatusDesc = dtObj.CycleStatusDesc;
			oaObj.CycleRow = dtObj.CycleRow;
			oaObj.Createdate = dtObj.Createdate;
			oaObj.BeTerminated = dtObj.BeTerminated;
			oaObj.ArchiveDate = dtObj.ArchiveDate;
			oaObj.ArchiveCode = dtObj.ArchiveCode;
			oaObj.ActionParentId = dtObj.ActionParentId;
			oaObj.ActionName = dtObj.ActionName;
			oaObj.ActionId = dtObj.ActionId;
			return oaObj;
		}
		
		public Requestcartablecycle UpdateOrCreate(RequestcartablecycleDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(RequestcartablecycleDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			Requestcartablecycle oaObj = (from t in this.Context.GetAll<Requestcartablecycle>() where
								t.CycleId == dtObj.CycleId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static RequestcartablecycleDto GetDto(Requestcartablecycle oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			RequestcartablecycleDto dtObj = new RequestcartablecycleDto();
			dtObj.Servicejob = oaObj.Servicejob;
			dtObj.Servicecategory = oaObj.Servicecategory;
			dtObj.SerReqId = oaObj.SerReqId;
			dtObj.Sendtime = oaObj.Sendtime;
			dtObj.SenderPerId = oaObj.SenderPerId;
			dtObj.SenderNameFamily = oaObj.SenderNameFamily;
			dtObj.SendDate = oaObj.SendDate;
			dtObj.ReceiverPerId = oaObj.ReceiverPerId;
			dtObj.ReceiverNameFamily = oaObj.ReceiverNameFamily;
			dtObj.PositionTypeId = oaObj.PositionTypeId;
			dtObj.Personelname = oaObj.Personelname;
			dtObj.Ownername = oaObj.Ownername;
			dtObj.OwnerChartName = oaObj.OwnerChartName;
			dtObj.NoArchiveDate = oaObj.NoArchiveDate;
			dtObj.IntialingComment = oaObj.IntialingComment;
			dtObj.CyclestatusChangeDate = oaObj.CyclestatusChangeDate;
			dtObj.CycleStatusId = oaObj.CycleStatusId;
			dtObj.CycleStatusDesc = oaObj.CycleStatusDesc;
			dtObj.CycleRow = oaObj.CycleRow;
			dtObj.CycleId = oaObj.CycleId;
			dtObj.Createdate = oaObj.Createdate;
			dtObj.BeTerminated = oaObj.BeTerminated;
			dtObj.ArchiveDate = oaObj.ArchiveDate;
			dtObj.ArchiveCode = oaObj.ArchiveCode;
			dtObj.ActionParentId = oaObj.ActionParentId;
			dtObj.ActionName = oaObj.ActionName;
			dtObj.ActionId = oaObj.ActionId;
			
			return dtObj;
		}
		
		public static IList<RequestcartablecycleDto> GetDtos(IQueryable<Requestcartablecycle> oaObjects)
		{
			IList<RequestcartablecycleDto> dtObjects = new List<RequestcartablecycleDto>();
			foreach(Requestcartablecycle oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}

namespace ISE.ServiceDesk.Model	
{
	public partial class VwHokmRepository : ISE.Framework.Server.Core.DataAccessBase.IRepository<VwHokm, VwHokmDto>
	{
		private EntitiesModel1 context;
		
		public EntitiesModel1 Context
		{
		    get
		    {
		        if (this.context == null)
		        {
		            this.context = new EntitiesModel1();
		        }
		        return this.context;
		    }
		}
		
		public VwHokmDto FindSingle(Expression<Func<VwHokm, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    VwHokm oaObj = this.Context.GetAll<VwHokm>().Where(expression).FirstOrDefault();
		
		    return GetDto(oaObj);
		}
		
		public IList<VwHokmDto> Find(Expression<Func<VwHokm, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		    IQueryable<VwHokm> oaObjects = this.Context.GetAll<VwHokm>().Where(expression);
		
		    return GetDtos(oaObjects);
		}
		
		public IQueryable<VwHokm> GetQueryable()
		{    
		    IQueryable<VwHokm> oaObjects = this.Context.GetAll<VwHokm>();
		
		    return oaObjects;
		}
		
		public long Count(Expression<Func<VwHokm, bool>> expression)
		{
		    if (expression == null)
		    {
		        expression = (x) => true;
		    }
		   long count = this.Context.GetAll<VwHokm>().Count(expression);
		
		    return count;
		}
		
		internal static VwHokm CreateInternal(VwHokmDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			VwHokm oaObj = new VwHokm();
		
			oaObj.TelNo = dtObj.TelNo;
			oaObj.StatementNo = dtObj.StatementNo;
			oaObj.SematTitle = dtObj.SematTitle;
			oaObj.PrsNo = dtObj.PrsNo;
			oaObj.PostalCode = dtObj.PostalCode;
			oaObj.PostTitle = dtObj.PostTitle;
			oaObj.PostSrl = dtObj.PostSrl;
			oaObj.Positionlevel = dtObj.Positionlevel;
			oaObj.PerId = dtObj.PerId;
			oaObj.NameFamily = dtObj.NameFamily;
			oaObj.Name = dtObj.Name;
			oaObj.MobileNo = dtObj.MobileNo;
			oaObj.MeliCode = dtObj.MeliCode;
			oaObj.JobTitle = dtObj.JobTitle;
			oaObj.JobSrl = dtObj.JobSrl;
			oaObj.JobCode = dtObj.JobCode;
			oaObj.IssuDate = dtObj.IssuDate;
			oaObj.IdNo = dtObj.IdNo;
			oaObj.Head = dtObj.Head;
			oaObj.FileNo = dtObj.FileNo;
			oaObj.Family = dtObj.Family;
			oaObj.EmsalrpSrl = dtObj.EmsalrpSrl;
			oaObj.EmplDate = dtObj.EmplDate;
			oaObj.EmpblcpSrl = dtObj.EmpblcpSrl;
			oaObj.EmemptpSrl = dtObj.EmemptpSrl;
			oaObj.EmemptpDes = dtObj.EmemptpDes;
			oaObj.EmcostoTitle = dtObj.EmcostoTitle;
			oaObj.EmcostoSrlCostAssign = dtObj.EmcostoSrlCostAssign;
			oaObj.EmcostoSrl = dtObj.EmcostoSrl;
			oaObj.EmcostoIndependTitle = dtObj.EmcostoIndependTitle;
			oaObj.EmcostoIndependSrl = dtObj.EmcostoIndependSrl;
			oaObj.BirthDate = dtObj.BirthDate;
			oaObj.Address = dtObj.Address;
		
			context.Add(oaObj);
			return oaObj;
		}
		
		public VwHokm Create(VwHokmDto dtObj)
		{
			return CreateInternal(dtObj, this.Context);
		}
		
		internal static VwHokm UpdateOrCreateInternal(VwHokmDto dtObj, EntitiesModel1 context)
		{
			if(dtObj == null)
			{
				return null;
			}
			VwHokm oaObj = (from t in context.GetAll<VwHokm>() where
							t.PerId == dtObj.PerId	
								select t).FirstOrDefault();
			if (oaObj == null)
			{
				return CreateInternal(dtObj, context);
			}
			oaObj.TelNo = dtObj.TelNo;
			oaObj.StatementNo = dtObj.StatementNo;
			oaObj.SematTitle = dtObj.SematTitle;
			oaObj.PrsNo = dtObj.PrsNo;
			oaObj.PostalCode = dtObj.PostalCode;
			oaObj.PostTitle = dtObj.PostTitle;
			oaObj.PostSrl = dtObj.PostSrl;
			oaObj.Positionlevel = dtObj.Positionlevel;
			oaObj.NameFamily = dtObj.NameFamily;
			oaObj.Name = dtObj.Name;
			oaObj.MobileNo = dtObj.MobileNo;
			oaObj.MeliCode = dtObj.MeliCode;
			oaObj.JobTitle = dtObj.JobTitle;
			oaObj.JobSrl = dtObj.JobSrl;
			oaObj.JobCode = dtObj.JobCode;
			oaObj.IssuDate = dtObj.IssuDate;
			oaObj.IdNo = dtObj.IdNo;
			oaObj.Head = dtObj.Head;
			oaObj.FileNo = dtObj.FileNo;
			oaObj.Family = dtObj.Family;
			oaObj.EmsalrpSrl = dtObj.EmsalrpSrl;
			oaObj.EmplDate = dtObj.EmplDate;
			oaObj.EmpblcpSrl = dtObj.EmpblcpSrl;
			oaObj.EmemptpSrl = dtObj.EmemptpSrl;
			oaObj.EmemptpDes = dtObj.EmemptpDes;
			oaObj.EmcostoTitle = dtObj.EmcostoTitle;
			oaObj.EmcostoSrlCostAssign = dtObj.EmcostoSrlCostAssign;
			oaObj.EmcostoSrl = dtObj.EmcostoSrl;
			oaObj.EmcostoIndependTitle = dtObj.EmcostoIndependTitle;
			oaObj.EmcostoIndependSrl = dtObj.EmcostoIndependSrl;
			oaObj.BirthDate = dtObj.BirthDate;
			oaObj.Address = dtObj.Address;
			return oaObj;
		}
		
		public VwHokm UpdateOrCreate(VwHokmDto dtObj)
		{
			return UpdateOrCreateInternal(dtObj, this.Context);
		}
		
		public void Delete(VwHokmDto dtObj)
		{
			if(dtObj == null)
			{
				return;
			}
			VwHokm oaObj = (from t in this.Context.GetAll<VwHokm>() where
								t.PerId == dtObj.PerId	
								select t).FirstOrDefault();
			if (oaObj != null)
			{
				this.Context.Delete(oaObj);
			}
		}
		
		public void SaveChanges()
		{
			this.Context.SaveChanges();
		}
		
		public static VwHokmDto GetDto(VwHokm oaObj)
		{
			if(oaObj == null)
			{
				return null;
			}
			VwHokmDto dtObj = new VwHokmDto();
			dtObj.TelNo = oaObj.TelNo;
			dtObj.StatementNo = oaObj.StatementNo;
			dtObj.SematTitle = oaObj.SematTitle;
			dtObj.PrsNo = oaObj.PrsNo;
			dtObj.PostalCode = oaObj.PostalCode;
			dtObj.PostTitle = oaObj.PostTitle;
			dtObj.PostSrl = oaObj.PostSrl;
			dtObj.Positionlevel = oaObj.Positionlevel;
			dtObj.PerId = oaObj.PerId;
			dtObj.NameFamily = oaObj.NameFamily;
			dtObj.Name = oaObj.Name;
			dtObj.MobileNo = oaObj.MobileNo;
			dtObj.MeliCode = oaObj.MeliCode;
			dtObj.JobTitle = oaObj.JobTitle;
			dtObj.JobSrl = oaObj.JobSrl;
			dtObj.JobCode = oaObj.JobCode;
			dtObj.IssuDate = oaObj.IssuDate;
			dtObj.IdNo = oaObj.IdNo;
			dtObj.Head = oaObj.Head;
			dtObj.FileNo = oaObj.FileNo;
			dtObj.Family = oaObj.Family;
			dtObj.EmsalrpSrl = oaObj.EmsalrpSrl;
			dtObj.EmplDate = oaObj.EmplDate;
			dtObj.EmpblcpSrl = oaObj.EmpblcpSrl;
			dtObj.EmemptpSrl = oaObj.EmemptpSrl;
			dtObj.EmemptpDes = oaObj.EmemptpDes;
			dtObj.EmcostoTitle = oaObj.EmcostoTitle;
			dtObj.EmcostoSrlCostAssign = oaObj.EmcostoSrlCostAssign;
			dtObj.EmcostoSrl = oaObj.EmcostoSrl;
			dtObj.EmcostoIndependTitle = oaObj.EmcostoIndependTitle;
			dtObj.EmcostoIndependSrl = oaObj.EmcostoIndependSrl;
			dtObj.BirthDate = oaObj.BirthDate;
			dtObj.Address = oaObj.Address;
			
			return dtObj;
		}
		
		public static IList<VwHokmDto> GetDtos(IQueryable<VwHokm> oaObjects)
		{
			IList<VwHokmDto> dtObjects = new List<VwHokmDto>();
			foreach(VwHokm oaObj in oaObjects)
			{
				dtObjects.Add(GetDto(oaObj));
			}
			return dtObjects;
		}
		
		public void Dispose()
		{
			if(this.context != null)
			{
				this.context.Dispose();
			}
		}
	}
}
#pragma warning restore 1591
